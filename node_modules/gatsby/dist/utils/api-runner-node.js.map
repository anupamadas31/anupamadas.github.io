{"version":3,"sources":["../../src/utils/api-runner-node.js"],"names":["Promise","require","_","chalk","bindActionCreators","tracer","globalTracer","reporter","stackTrace","codeFrameColumns","fs","getCache","createContentDigest","buildObjectType","buildUnionType","buildInterfaceType","buildInputObjectType","buildEnumType","buildScalarType","emitter","store","getNodes","getNode","getNodesByType","hasNodeChanged","getNodeAndSavePathDependency","getPublicPath","getNonGatsbyCodeFrameFormatted","trackBuildError","decorateEvent","loadNodeContent","boundPluginActionCreators","doubleBind","boundActionCreators","api","plugin","actionOptions","traceId","name","keys","Object","doubleBoundActionCreators","i","length","key","boundActionCreator","args","undefined","initAPICallTracing","parentSpan","startSpan","spanName","spanArgs","defaultSpanArgs","childOf","merge","getLocalReporter","activity","panicOnBuild","bind","runAPI","gatsbyNode","resolve","spanOptions","pluginSpan","setTag","publicActions","restrictedActionsAvailableInAPI","availableActions","dispatch","config","program","getState","pathPrefix","prefixPaths","publicPath","namespacedCreateNodeId","id","tracing","cache","actions","apiFinished","alreadyDisplayed","createPageAction","createPage","warning","stripIndent","bold","possiblyCodeFrame","push","warn","join","localReporter","runningActivities","Set","localReporterThatCleansUpAfterMisbehavingPlugins","activityTimer","apply","start","add","end","delete","createProgress","done","endInProgressActivitiesCreatedByThisRun","forEach","apiCallArgs","basePath","createNodeId","schema","pluginOptions","fromCallback","callback","cb","err","val","finish","e","error","pluginName","version","apisRunningById","Map","apisRunningByTraceId","waitingForCasacadeToFinish","module","exports","pluginSource","traceTags","waitForCascadingActions","apiSpanArgs","apiSpan","value","plugins","flattenedPlugins","implementingPlugins","filter","nodeAPIs","includes","apiRunInstance","span","startTime","Date","toJSON","type","node","internal","contentDigest","filename","page","path","argsJson","JSON","stringify","omit","size","emit","set","has","currentCount","get","stopQueuedApiRuns","onAPIRunComplete","actionHandler","action","payload","on","off","mapSeries","catch","file","parse","find","test","fileName","codeFrame","structuredError","lineNumber","line","columnNumber","column","code","readFileSync","encoding","highlightCode","location","filePath","context","then","results","result","isEmpty","instance","apisByTraceIdCount"],"mappings":"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","sourcesContent":["const Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst chalk = require(`chalk`)\nconst { bindActionCreators } = require(`redux`)\n\nconst tracer = require(`opentracing`).globalTracer()\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst stackTrace = require(`stack-trace`)\nconst { codeFrameColumns } = require(`@babel/code-frame`)\nconst fs = require(`fs-extra`)\nconst { getCache } = require(`./get-cache`)\nimport { createNodeId } from \"./create-node-id\"\nconst { createContentDigest } = require(`gatsby-core-utils`)\nconst {\n  buildObjectType,\n  buildUnionType,\n  buildInterfaceType,\n  buildInputObjectType,\n  buildEnumType,\n  buildScalarType,\n} = require(`../schema/types/type-builders`)\nconst { emitter, store } = require(`../redux`)\nconst {\n  getNodes,\n  getNode,\n  getNodesByType,\n  hasNodeChanged,\n  getNodeAndSavePathDependency,\n} = require(`../redux/nodes`)\nconst { getPublicPath } = require(`./get-public-path`)\nconst { getNonGatsbyCodeFrameFormatted } = require(`./stack-trace-utils`)\nconst { trackBuildError, decorateEvent } = require(`gatsby-telemetry`)\nimport errorParser from \"./api-runner-error-parser\"\nconst { loadNodeContent } = require(`../db/nodes`)\n\n// Bind action creators per plugin so we can auto-add\n// metadata to actions they create.\nconst boundPluginActionCreators = {}\nconst doubleBind = (boundActionCreators, api, plugin, actionOptions) => {\n  const { traceId } = actionOptions\n  if (boundPluginActionCreators[plugin.name + api + traceId]) {\n    return boundPluginActionCreators[plugin.name + api + traceId]\n  } else {\n    const keys = Object.keys(boundActionCreators)\n    const doubleBoundActionCreators = {}\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      const boundActionCreator = boundActionCreators[key]\n      if (typeof boundActionCreator === `function`) {\n        doubleBoundActionCreators[key] = (...args) => {\n          // Let action callers override who the plugin is. Shouldn't be\n          // used that often.\n          if (args.length === 1) {\n            return boundActionCreator(args[0], plugin, actionOptions)\n          } else if (args.length === 2) {\n            return boundActionCreator(args[0], args[1], actionOptions)\n          }\n          return undefined\n        }\n      }\n    }\n    boundPluginActionCreators[\n      plugin.name + api + traceId\n    ] = doubleBoundActionCreators\n    return doubleBoundActionCreators\n  }\n}\n\nconst initAPICallTracing = parentSpan => {\n  const startSpan = (spanName, spanArgs = {}) => {\n    const defaultSpanArgs = { childOf: parentSpan }\n\n    return tracer.startSpan(spanName, _.merge(defaultSpanArgs, spanArgs))\n  }\n\n  return {\n    tracer,\n    parentSpan,\n    startSpan,\n  }\n}\n\nconst getLocalReporter = (activity, reporter) =>\n  activity\n    ? { ...reporter, panicOnBuild: activity.panicOnBuild.bind(activity) }\n    : reporter\n\nconst runAPI = async (plugin, api, args, activity) => {\n  const gatsbyNode = require(`${plugin.resolve}/gatsby-node`)\n  if (gatsbyNode[api]) {\n    const parentSpan = args && args.parentSpan\n    const spanOptions = parentSpan ? { childOf: parentSpan } : {}\n    const pluginSpan = tracer.startSpan(`run-plugin`, spanOptions)\n\n    pluginSpan.setTag(`api`, api)\n    pluginSpan.setTag(`plugin`, plugin.name)\n\n    const {\n      publicActions,\n      restrictedActionsAvailableInAPI,\n    } = require(`../redux/actions`)\n    const availableActions = {\n      ...publicActions,\n      ...(restrictedActionsAvailableInAPI[api] || {}),\n    }\n    const boundActionCreators = bindActionCreators(\n      availableActions,\n      store.dispatch\n    )\n    const doubleBoundActionCreators = doubleBind(\n      boundActionCreators,\n      api,\n      plugin,\n      { ...args, parentSpan: pluginSpan, activity }\n    )\n\n    const { config, program } = store.getState()\n\n    const pathPrefix = (program.prefixPaths && config.pathPrefix) || ``\n    const publicPath = getPublicPath({ ...config, ...program }, ``)\n\n    const namespacedCreateNodeId = id => createNodeId(id, plugin.name)\n\n    const tracing = initAPICallTracing(pluginSpan)\n\n    const cache = getCache(plugin.name)\n\n    // Ideally this would be more abstracted and applied to more situations, but right now\n    // this can be potentially breaking so targeting `createPages` API and `createPage` action\n    let actions = doubleBoundActionCreators\n    let apiFinished = false\n    if (api === `createPages`) {\n      let alreadyDisplayed = false\n      const createPageAction = actions.createPage\n      // create new actions object with wrapped createPage action\n      // doubleBoundActionCreators is memoized, so we can't just\n      // reassign createPage field as this would cause this extra logic\n      // to be used in subsequent APIs and we only want to target this `createPages` call.\n      actions = {\n        ...actions,\n        createPage: (...args) => {\n          createPageAction(...args)\n          if (apiFinished && !alreadyDisplayed) {\n            const warning = [\n              reporter.stripIndent(`\n              Action ${chalk.bold(\n                `createPage`\n              )} was called outside of its expected asynchronous lifecycle ${chalk.bold(\n                `createPages`\n              )} in ${chalk.bold(plugin.name)}.\n              Ensure that you return a Promise from ${chalk.bold(\n                `createPages`\n              )} and are awaiting any asynchronous method invocations (like ${chalk.bold(\n                `graphql`\n              )} or http requests).\n              For more info and debugging tips: see ${chalk.bold(\n                `https://gatsby.dev/sync-actions`\n              )}\n            `),\n            ]\n\n            const possiblyCodeFrame = getNonGatsbyCodeFrameFormatted()\n            if (possiblyCodeFrame) {\n              warning.push(possiblyCodeFrame)\n            }\n\n            reporter.warn(warning.join(`\\n\\n`))\n            alreadyDisplayed = true\n          }\n        },\n      }\n    }\n    const localReporter = getLocalReporter(activity, reporter)\n\n    const runningActivities = new Set()\n\n    const localReporterThatCleansUpAfterMisbehavingPlugins = {\n      ...localReporter,\n      activityTimer: (...args) => {\n        const activity = reporter.activityTimer.apply(reporter, args)\n\n        return {\n          ...activity,\n          start: () => {\n            activity.start()\n            runningActivities.add(activity)\n          },\n          end: () => {\n            activity.end()\n            runningActivities.delete(activity)\n          },\n        }\n      },\n      createProgress: (...args) => {\n        const activity = reporter.createProgress.apply(reporter, args)\n\n        return {\n          ...activity,\n          start: () => {\n            activity.start()\n            runningActivities.add(activity)\n          },\n          end: () => {\n            activity.end()\n            runningActivities.delete(activity)\n          },\n          done: () => {\n            activity.done()\n            runningActivities.delete(activity)\n          },\n        }\n      },\n    }\n\n    const endInProgressActivitiesCreatedByThisRun = () => {\n      runningActivities.forEach(activity => activity.end())\n    }\n\n    const apiCallArgs = [\n      {\n        ...args,\n        basePath: pathPrefix,\n        pathPrefix: publicPath,\n        boundActionCreators: actions,\n        actions,\n        loadNodeContent,\n        store,\n        emitter,\n        getCache,\n        getNodes,\n        getNode,\n        getNodesByType,\n        hasNodeChanged,\n        reporter: localReporterThatCleansUpAfterMisbehavingPlugins,\n        getNodeAndSavePathDependency,\n        cache,\n        createNodeId: namespacedCreateNodeId,\n        createContentDigest,\n        tracing,\n        schema: {\n          buildObjectType,\n          buildUnionType,\n          buildInterfaceType,\n          buildInputObjectType,\n          buildEnumType,\n          buildScalarType,\n        },\n      },\n      plugin.pluginOptions,\n    ]\n\n    // If the plugin is using a callback use that otherwise\n    // expect a Promise to be returned.\n    if (gatsbyNode[api].length === 3) {\n      return Promise.fromCallback(callback => {\n        const cb = (err, val) => {\n          pluginSpan.finish()\n          apiFinished = true\n          endInProgressActivitiesCreatedByThisRun()\n          callback(err, val)\n        }\n\n        try {\n          gatsbyNode[api](...apiCallArgs, cb)\n        } catch (e) {\n          trackBuildError(api, {\n            error: e,\n            pluginName: `${plugin.name}@${plugin.version}`,\n          })\n          throw e\n        }\n      })\n    } else {\n      try {\n        return await gatsbyNode[api](...apiCallArgs)\n      } finally {\n        pluginSpan.finish()\n        apiFinished = true\n        endInProgressActivitiesCreatedByThisRun()\n      }\n    }\n  }\n\n  return null\n}\n\nconst apisRunningById = new Map()\nconst apisRunningByTraceId = new Map()\nlet waitingForCasacadeToFinish = []\n\nmodule.exports = async (api, args = {}, { pluginSource, activity } = {}) =>\n  new Promise(resolve => {\n    const { parentSpan, traceId, traceTags, waitForCascadingActions } = args\n    const apiSpanArgs = parentSpan ? { childOf: parentSpan } : {}\n    const apiSpan = tracer.startSpan(`run-api`, apiSpanArgs)\n\n    apiSpan.setTag(`api`, api)\n    _.forEach(traceTags, (value, key) => {\n      apiSpan.setTag(key, value)\n    })\n\n    const plugins = store.getState().flattenedPlugins\n\n    // Get the list of plugins that implement this API.\n    // Also: Break infinite loops. Sometimes a plugin will implement an API and\n    // call an action which will trigger the same API being called.\n    // `onCreatePage` is the only example right now. In these cases, we should\n    // avoid calling the originating plugin again.\n    const implementingPlugins = plugins.filter(\n      plugin => plugin.nodeAPIs.includes(api) && plugin.name !== pluginSource\n    )\n\n    const apiRunInstance = {\n      api,\n      args,\n      pluginSource,\n      resolve,\n      span: apiSpan,\n      startTime: new Date().toJSON(),\n      traceId,\n    }\n\n    // Generate IDs for api runs. Most IDs we generate from the args\n    // but some API calls can have very large argument objects so we\n    // have special ways of generating IDs for those to avoid stringifying\n    // large objects.\n    let id\n    if (api === `setFieldsOnGraphQLNodeType`) {\n      id = `${api}${apiRunInstance.startTime}${args.type.name}${traceId}`\n    } else if (api === `onCreateNode`) {\n      id = `${api}${apiRunInstance.startTime}${args.node.internal.contentDigest}${traceId}`\n    } else if (api === `preprocessSource`) {\n      id = `${api}${apiRunInstance.startTime}${args.filename}${traceId}`\n    } else if (api === `onCreatePage`) {\n      id = `${api}${apiRunInstance.startTime}${args.page.path}${traceId}`\n    } else {\n      // When tracing is turned on, the `args` object will have a\n      // `parentSpan` field that can be quite large. So we omit it\n      // before calling stringify\n      const argsJson = JSON.stringify(_.omit(args, `parentSpan`))\n      id = `${api}|${apiRunInstance.startTime}|${apiRunInstance.traceId}|${argsJson}`\n    }\n    apiRunInstance.id = id\n\n    if (waitForCascadingActions) {\n      waitingForCasacadeToFinish.push(apiRunInstance)\n    }\n\n    if (apisRunningById.size === 0) {\n      emitter.emit(`API_RUNNING_START`)\n    }\n\n    apisRunningById.set(apiRunInstance.id, apiRunInstance)\n    if (apisRunningByTraceId.has(apiRunInstance.traceId)) {\n      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)\n      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount + 1)\n    } else {\n      apisRunningByTraceId.set(apiRunInstance.traceId, 1)\n    }\n\n    let stopQueuedApiRuns = false\n    let onAPIRunComplete = null\n    if (api === `onCreatePage`) {\n      const path = args.page.path\n      const actionHandler = action => {\n        if (action.payload.path === path) {\n          stopQueuedApiRuns = true\n        }\n      }\n      emitter.on(`DELETE_PAGE`, actionHandler)\n      onAPIRunComplete = () => {\n        emitter.off(`DELETE_PAGE`, actionHandler)\n      }\n    }\n\n    Promise.mapSeries(implementingPlugins, plugin => {\n      if (stopQueuedApiRuns) {\n        return null\n      }\n\n      const pluginName =\n        plugin.name === `default-site-plugin` ? `gatsby-node.js` : plugin.name\n\n      return new Promise(resolve => {\n        resolve(runAPI(plugin, api, { ...args, parentSpan: apiSpan }, activity))\n      }).catch(err => {\n        decorateEvent(`BUILD_PANIC`, {\n          pluginName: `${plugin.name}@${plugin.version}`,\n        })\n\n        const localReporter = getLocalReporter(activity, reporter)\n\n        const file = stackTrace\n          .parse(err)\n          .find(file => /gatsby-node/.test(file.fileName))\n\n        let codeFrame = ``\n        const structuredError = errorParser({ err })\n\n        if (file) {\n          const { fileName, lineNumber: line, columnNumber: column } = file\n\n          const code = fs.readFileSync(fileName, { encoding: `utf-8` })\n          codeFrame = codeFrameColumns(\n            code,\n            {\n              start: {\n                line,\n                column,\n              },\n            },\n            {\n              highlightCode: true,\n            }\n          )\n\n          structuredError.location = {\n            start: { line: line, column: column },\n          }\n          structuredError.filePath = fileName\n        }\n\n        structuredError.context = {\n          ...structuredError.context,\n          pluginName,\n          api,\n          codeFrame,\n        }\n\n        localReporter.panicOnBuild(structuredError)\n\n        return null\n      })\n    }).then(results => {\n      if (onAPIRunComplete) {\n        onAPIRunComplete()\n      }\n      // Remove runner instance\n      apisRunningById.delete(apiRunInstance.id)\n      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)\n      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount - 1)\n\n      if (apisRunningById.size === 0) {\n        emitter.emit(`API_RUNNING_QUEUE_EMPTY`)\n      }\n\n      // Filter empty results\n      apiRunInstance.results = results.filter(result => !_.isEmpty(result))\n\n      // Filter out empty responses and return if the\n      // api caller isn't waiting for cascading actions to finish.\n      if (!waitForCascadingActions) {\n        apiSpan.finish()\n        resolve(apiRunInstance.results)\n      }\n\n      // Check if any of our waiters are done.\n      waitingForCasacadeToFinish = waitingForCasacadeToFinish.filter(\n        instance => {\n          // If none of its trace IDs are running, it's done.\n          const apisByTraceIdCount = apisRunningByTraceId.get(instance.traceId)\n          if (apisByTraceIdCount === 0) {\n            instance.span.finish()\n            instance.resolve(instance.results)\n            return false\n          } else {\n            return true\n          }\n        }\n      )\n      return\n    })\n  })\n"],"file":"api-runner-node.js"}