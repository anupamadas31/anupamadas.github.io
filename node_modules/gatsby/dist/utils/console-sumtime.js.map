{"version":3,"sources":["../../src/utils/console-sumtime.ts"],"names":["performance","require","global","console","log","sumTime","running","Map","data","indent","_sumTime","name","callback","has","warn","now","set","repeat","sumTimeEnd","_sumTimeEnd","recordAs","endTime","indentedName","indentedRecordAs","start","get","undefined","delete","add","_sumTimeGroup","sumTimeGroup","_sumTimeGroupEnd","sumTimeGroupEnd","_sumTimeCancel","sumTimeCancel","_sumTimePrint","group","maxs","maxc","forEach","sum","count","_name","whole","Math","floor","toString","max","length","String","arr","isTimer","rest","slice","push","padStart","padEnd","reverse","join","groupEnd","sumTimePrint","_sumTimeClear","sumTimeReset","_sumTimeCount","delta","sumTimeCount","obj","getData"],"mappings":"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","sourcesContent":["/**\n *\n * console.sumTime\n *\n * Note: this script extends the global `console` object with a few methods intended to collect timing\n * information or other counts based on a key. It's basic usage is very similar to `console.time()` and\n * `console.timeEnd()`, except it accumulates and requires you to explicitly trigger the printing part.\n *\n * The idea of these tools is to easily collect timing information on particular function calls or certain\n * lines of code. This is a debugging-only tool that should be a noop if not used.\n *\n * Beware that this tool can not account and compensate for async time spent elsewhere\n *\n * API:\n *\n * - console.sumTime(key: string, callback?: (): any): void\n *   - Similar to console.time, you have to pass the same string to stop this timer after which the delta\n *     of the time will be added to the entry for that key.\n *   - It is also possible to time a function by passing it as a second argument. In that case the function\n *     is called and timed until it yields.\n *\n * - console.sumTimeEnd(key: string, altKey?: string): void\n *   - The running timer by key is stopped and the entry for the key is updated by the time delta taken.\n *   - If the second parameter is given, an entry by that key is updated instead (useful for dynamics).\n *\n * - console.sumTimeGroup(key: string, callback: (): any): void\n *   - Similar to console.group, will call console.sumTime with the same args and automatically increase\n *     the key indentation by two spaces.\n *   - It does not call console.group (!)\n *\n * - console.sumTimeGroupEnd(key: string, altKey: string): undefined\n *   - Similar to console.groupEnd, calls console.sumTimeGroupEnd with same args\n *   - Does not call console.groupEnd (!)\n *\n * - console.sumTimeCancel(key: string): undefined\n *   - Stops the running timer by given key and ignores its time delta\n *\n * - console.sumTimePrint(): undefined\n *   - Dumps the accumulated data to console (through console.log and console.group)\n *\n * - console.sumTimeReset(): undefined\n *   - Clears the accumulated data and keys\n *\n * - console.sumTimeCount(key: string, delta: number = 1): undefined\n *   - Increment the tracked amount of given key by given delta\n *   - If a key exists but was never updated by sumTime then it is printed without `ms` suffix\n *\n */\n\nconst { performance } = require(`perf_hooks`)\n\nglobal.console.log(`[main] Attaching to console now...`)\nconst console: any = global.console.sumTime ? {} : global.console\n\nlet running: Map<string, number> = new Map()\nlet data = new Map()\nlet indent = 0\n\nfunction _sumTime(name, callback) {\n  if (running.has(name)) {\n    return console.warn(`console.sumTime: name already being recorded:`, name)\n  }\n\n  const now = performance.now()\n  running.set(` `.repeat(indent) + name, now)\n\n  if (callback) {\n    try {\n      callback()\n    } finally {\n      console.sumTimeEnd(` `.repeat(indent) + name)\n    }\n  }\n}\nconsole.sumTime = _sumTime\n\nfunction _sumTimeEnd(name, recordAs = name) {\n  const endTime = performance.now()\n  const indentedName = ` `.repeat(indent) + name\n  const indentedRecordAs = ` `.repeat(indent) + recordAs\n  const start = running.get(indentedName)\n  if (start === undefined) {\n    return console.warn(`console.sumTimeEnd: name not being recorded:`, name)\n  }\n  running.delete(indentedName)\n\n  add(indentedRecordAs, endTime - start, true)\n}\nconsole.sumTimeEnd = _sumTimeEnd\n\nfunction _sumTimeGroup(name, callback) {\n  _sumTime(name, callback)\n  indent += 2\n}\nconsole.sumTimeGroup = _sumTimeGroup\n\nfunction _sumTimeGroupEnd(name, recordAs = name) {\n  indent -= 2\n  _sumTimeEnd(name, recordAs)\n}\nconsole.sumTimeGroupEnd = _sumTimeGroupEnd\n\nfunction _sumTimeCancel(name) {\n  // Should this warn if the name does not exist..?\n  running.delete(name)\n}\nconsole.sumTimeCancel = _sumTimeCancel\n\nfunction _sumTimePrint() {\n  // console.log(data)\n  console.group(`sumTime report;`)\n  let maxs = 0\n  let maxc = 0\n  data.forEach(({ sum, count }, _name) => {\n    const whole = Math.floor(sum).toString()\n    maxs = Math.max(maxs, whole.length)\n    maxc = Math.max(maxc, String(count).length)\n  })\n  const arr: Array<string> = []\n  data.forEach(({ sum, count, isTimer }, name) => {\n    const whole = Math.floor(sum).toString()\n    const rest = String(sum % 1).slice(1) // Either zero or `0.` plus fraction\n    arr.push(\n      `- ` +\n        (isTimer\n          ? whole.padStart(maxs, ` `) + rest.slice(0, 3).padEnd(3, ` `) + `ms`\n          : (\n              whole.padStart(maxs, ` `) +\n              (sum === count ? rest + ` x` : rest.padEnd(3, ` `))\n            ).padEnd(maxs + 5, ` `)) +\n        (isTimer || count !== sum\n          ? ` (` + count.toString().padStart(maxc + 1, ` `) + `x )`\n          : ` `.repeat(maxc + 6)) +\n        `: ` +\n        name\n    )\n  })\n  console.log(arr.reverse().join(`\\n`))\n  console.groupEnd()\n}\nconsole.sumTimePrint = _sumTimePrint\n\nfunction _sumTimeClear() {\n  data = new Map()\n  running = new Map()\n  indent = 0\n}\nconsole.sumTimeReset = _sumTimeClear\n\nfunction _sumTimeCount(name, delta = 1) {\n  add(name, delta, false)\n}\nconsole.sumTimeCount = _sumTimeCount\n\nfunction add(name: string, delta: number, isTimer: boolean) {\n  let obj = data.get(name)\n  if (obj === undefined) {\n    obj = { sum: 0, count: 0, isTimer }\n    data.set(name, obj)\n  }\n  obj.sum += delta\n  obj.isTimer = isTimer\n  ++obj.count\n}\n\nexport default function getData() {\n  return data\n}\n"],"file":"console-sumtime.js"}